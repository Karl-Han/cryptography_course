use crate::lib::{basic_operations::*, key_msg::*, Algor::*};

#[test]
fn s_box_test() {
    let mut i: u8;
    for i in 0..=255 {
        assert_eq!(S_BOX[i], s_box(&(i as u8)));
    }

    println!("PASS s_box_test");
}

#[test]
fn encrypt_test() {
    // refer to example in P193
    let mut k: [u8; 16] = [
        0x0f, 0x15, 0x71, 0xc9, 0x47, 0xd9, 0xe8, 0x59, 0x0c, 0xb7, 0xad, 0xd6, 0xaf, 0x7f, 0x67,
        0x98,
    ];
    let mut msg: [u8; 16] = [
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32,
        0x10,
    ];
    let k = Key::new(&k);

    let res = M_row::new(&msg).encrypt(k);

    assert_eq!(
        res.msg(),
        [
            0xff, 0x0b, 0x84, 0x4a, 0x08, 0x53, 0xbf, 0x7c, 0x69, 0x34, 0xab, 0x43, 0x64, 0x14,
            0x8f, 0xb9
        ]
    )
    //println!("res = {:02x?}", res);
}

#[test]
fn decrypt_test() {
    // refer to example in P193
    let mut k: [u8; 16] = [
        0x0f, 0x15, 0x71, 0xc9, 0x47, 0xd9, 0xe8, 0x59, 0x0c, 0xb7, 0xad, 0xd6, 0xaf, 0x7f, 0x67,
        0x98,
    ];
    let mut msg: [u8; 16] = [
        0xff, 0x0b, 0x84, 0x4a, 0x08, 0x53, 0xbf, 0x7c, 0x69, 0x34, 0xab, 0x43, 0x64, 0x14, 0x8f,
        0xb9,
    ];
    let k = Key::new(&k);

    let res = M_row::new(&msg).decrypt(k);

    assert_eq!(
        res.msg(),
        [
            0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54,
            0x32, 0x10,
        ]
    )
    //println!("res = {:02x?}", res);
}
